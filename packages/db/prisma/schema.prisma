// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// -----------------------

enum RunAction {
    onBegin
    onStep
    onError
    onTestBegin
    onEnd
    onStepEnd
    onStepBegin
    onTestEnd
}

enum RunStatus {
    running
    finished
    timeout
}

model Project {
    // -----------------------
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    // -----------------------
    name        String
    description String?

    token String

    runs   Run[]
    config ProjectConfig?
}

model RunLog {
    // -----------------------
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    // -----------------------
    action    RunAction
    data      Json
    testId    String?

    runId String @db.ObjectId
    run   Run    @relation(fields: [runId], references: [id], onDelete: Cascade)
}

model Run {
    // -----------------------
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    // -----------------------
    status    RunStatus
    runId     String
    projectId String    @db.ObjectId
    project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

	timeoutAt DateTime?
	timeoutDuration Int?

    runLogs RunLog[]
}

model ProjectConfig {
    // -----------------------
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // -----------------------

    data      Json
    projectId String  @unique @db.ObjectId
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
